# -*- coding: utf-8 -*-
"""Untitled28.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GwvPnCVbiM5RPlqBqAsI9pzLSl-CnHwY
"""

import torch
import torch.nn as nn
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from torch.utils.data import Dataset, DataLoader
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
import re
import unidecode
import nltk

# Tải các tài nguyên cần thiết từ nltk
nltk.download('stopwords')

# =========================
# 1. Đọc và tiền xử lý dữ liệu
# =========================

# Đọc file CSV chứa dữ liệu tài chính
df = pd.read_csv('all_data.csv', encoding='ISO-8859-1', names=['sentiment', 'content'])

# Gán nhãn sentiment thành ID
classes = {cls: idx for idx, cls in enumerate(df['sentiment'].unique())}
df['sentiment'] = df['sentiment'].apply(lambda x: classes[x])

# Tiền xử lý văn bản
stop_words = stopwords.words('english')
stemmer = PorterStemmer()

def text_normalize(text):
    """
    Chuẩn hóa văn bản: viết thường, xóa dấu, loại bỏ stopwords, stemming.
    """
    text = text.lower()  # Chuyển sang chữ thường
    text = unidecode.unidecode(text)  # Loại bỏ dấu
    text = re.sub(r'[^\w\s]', '', text)  # Xóa dấu câu
    text = ' '.join([stemmer.stem(w) for w in text.split() if w not in stop_words])  # Xử lý stopword và stemming
    return text

# Áp dụng chuẩn hóa lên cột nội dung
df['content'] = df['content'].apply(text_normalize)

# =========================
# 2. Chuẩn bị dữ liệu
# =========================

# Tạo bộ từ vựng từ dữ liệu
vocab = list(set(word for sentence in df['content'] for word in sentence.split()))
vocab.append('UNK')  # Từ không xác định
vocab.append('PAD')  # Từ dùng để padding
word_to_idx = {word: idx for idx, word in enumerate(vocab)}

def transform(text, max_len=32):
    """
    Chuyển đổi văn bản thành danh sách các ID.
    """
    tokens = [word_to_idx.get(w, word_to_idx['UNK']) for w in text.split()]
    return tokens + [word_to_idx['PAD']] * (max_len - len(tokens)) if len(tokens) < max_len else tokens[:max_len]

# Chuyển đổi nội dung văn bản thành các ID
df['content'] = df['content'].apply(lambda x: transform(x))

# Chia dữ liệu thành tập train/val/test
X = df['content'].tolist()
y = df['sentiment'].tolist()

X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

# =========================
# 3. Xây dựng Dataset và DataLoader
# =========================

class FinancialDataset(Dataset):
    """
    Dataset cho bài toán Sentiment Analysis.
    """
    def __init__(self, texts, labels):
        self.texts = texts
        self.labels = labels

    def __len__(self):
        return len(self.texts)

    def __getitem__(self, idx):
        return torch.tensor(self.texts[idx]), torch.tensor(self.labels[idx])

# Khai báo DataLoader cho train, val và test
train_loader = DataLoader(FinancialDataset(X_train, y_train), batch_size=32, shuffle=True)
val_loader = DataLoader(FinancialDataset(X_val, y_val), batch_size=32)
test_loader = DataLoader(FinancialDataset(X_test, y_test), batch_size=32)

# =========================
# 4. Xây dựng mô hình RNN
# =========================

class SentimentClassifier(nn.Module):
    """
    Mô hình RNN với lớp embedding, RNN và fully connected.
    """
    def __init__(self, vocab_size, embed_dim, hidden_size, num_classes, n_layers=2, dropout=0.2):
        super().__init__()
        self.embedding = nn.Embedding(vocab_size, embed_dim)
        self.rnn = nn.RNN(embed_dim, hidden_size, n_layers, batch_first=True)
        self.fc = nn.Linear(hidden_size, num_classes)
        self.dropout = nn.Dropout(dropout)

    def forward(self, x):
        x = self.embedding(x)  # Embedding
        _, h = self.rnn(x)  # RNN
        x = self.fc(self.dropout(h[-1]))  # Fully connected
        return x

# Khởi tạo mô hình
device = 'cuda' if torch.cuda.is_available() else 'cpu'
model = SentimentClassifier(len(vocab), embed_dim=64, hidden_size=64, num_classes=len(classes)).to(device)

# =========================
# 5. Huấn luyện và đánh giá mô hình
# =========================

# Cài đặt hàm loss và optimizer
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=1e-3)

def train_model():
    """
    Hàm huấn luyện mô hình.
    """
    for epoch in range(10):  # Số epoch
        model.train()
        total_loss = 0
        for texts, labels in train_loader:
            texts, labels = texts.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(texts)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()
        print(f"Epoch {epoch + 1}, Loss: {total_loss / len(train_loader):.4f}")

def evaluate(loader):
    """
    Hàm đánh giá mô hình.
    """
    model.eval()
    total, correct = 0, 0
    with torch.no_grad():
        for texts, labels in loader:
            texts, labels = texts.to(device), labels.to(device)
            outputs = model(texts)
            _, preds = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (preds == labels).sum().item()
    return correct / total

# Huấn luyện mô hình
train_model()

# Đánh giá mô hình
val_acc = evaluate(val_loader)
test_acc = evaluate(test_loader)
print(f"Validation Accuracy: {val_acc:.2f}")
print(f"Test Accuracy: {test_acc:.2f}")